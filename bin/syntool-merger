#! /usr/bin/env python2
# encoding: utf-8

"""
Copyright (C) 2014-2018 OceanDataLab

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

import sys
import logging
import argparse
import traceback
import ConfigParser
import syntool_ingestor.merger


# Setup logger
logger = logging.getLogger()
handler = logging.StreamHandler()
handler.setLevel(logging.DEBUG)
logger.addHandler(handler)
logger.setLevel(logging.DEBUG)


def parse_cfg_file(cfg_file_path):
    """"""
    parser = ConfigParser.SafeConfigParser()
    parser.read(cfg_file_path)

    cfg = {}

    cfg['viewport'] = parser.get('portal', 'viewport')
    cfg['extent'] = parser.get('portal', 'extent')
    cfg['output_proj'] = parser.getint('portal', 'projection')

    return cfg


if '__main__' == __name__:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'input',
        help="Input directory (datagroup directory)",
        action="store"
    )
    parser.add_argument(
        '--output-dir',
        type=str,
        nargs=1,
        help='Directory where the results (tiles, metadata, ...) will be saved',
        action='store',
    )
    parser.add_argument(
        '-c', '--config',
        required=True,
        help='Configuration file',
        action='store'
    )

    args = parser.parse_args()

    try:
        cfg = parse_cfg_file(args.config)

        # TO RECONSIDER
        # output_id is needed for exporter to create syntool_id
        # better options would be :
        # - in exporter use syntool_id from metadata
        # (syntool_id is known before exporter in ingestor and merger)
        # - at least here, get output_id from ingestor raster plugin
        cfg['output_id'] = ''

        if args.output_dir:
            cfg['workspace_root'] = args.output_dir[0]

        metadata_path = syntool_ingestor.merger.merge(args.input, cfg)
    except:
        logger.error(traceback.print_exc())
        sys.exit(1)
